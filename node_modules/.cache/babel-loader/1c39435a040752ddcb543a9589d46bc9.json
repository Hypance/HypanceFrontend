{"ast":null,"code":"import { useEffect, useRef } from 'react';\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\n\nfunction useCommittedRef(value) {\n  var ref = useRef(value);\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nexport default useCommittedRef;","map":{"version":3,"names":["useEffect","useRef","useCommittedRef","value","ref","current"],"sources":["/Users/suhakesikbas/Desktop/hypancee/HypanceFrontend/node_modules/@restart/hooks/esm/useCommittedRef.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\n\nfunction useCommittedRef(value) {\n  var ref = useRef(value);\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nexport default useCommittedRef;"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;EAC9B,IAAIC,GAAG,GAAGH,MAAM,CAACE,KAAD,CAAhB;EACAH,SAAS,CAAC,YAAY;IACpBI,GAAG,CAACC,OAAJ,GAAcF,KAAd;EACD,CAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;EAGA,OAAOC,GAAP;AACD;;AAED,eAAeF,eAAf"},"metadata":{},"sourceType":"module"}