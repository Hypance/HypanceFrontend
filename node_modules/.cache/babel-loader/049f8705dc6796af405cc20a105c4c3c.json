{"ast":null,"code":"import { useContext, useCallback } from 'react';\nimport * as React from 'react';\nimport { useSSRSafeId } from './ssr';\nimport DropdownContext from './DropdownContext';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const isRoleMenu = el => {\n  var _el$getAttribute;\n\n  return ((_el$getAttribute = el.getAttribute('role')) == null ? void 0 : _el$getAttribute.toLowerCase()) === 'menu';\n};\n\nconst noop = () => {};\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */\n\n\nexport function useDropdownToggle() {\n  const id = useSSRSafeId();\n  const {\n    show = false,\n    toggle = noop,\n    setToggle,\n    menuElement\n  } = useContext(DropdownContext) || {};\n  const handleClick = useCallback(e => {\n    toggle(!show, e);\n  }, [show, toggle]);\n  const props = {\n    id,\n    ref: setToggle || noop,\n    onClick: handleClick,\n    'aria-expanded': !!show\n  }; // This is maybe better down in an effect, but\n  // the component is going to update anyway when the menu element\n  // is set so might return new props.\n\n  if (menuElement && isRoleMenu(menuElement)) {\n    props['aria-haspopup'] = true;\n  }\n\n  return [props, {\n    show,\n    toggle\n  }];\n}\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */\n\nfunction DropdownToggle(_ref) {\n  let {\n    children\n  } = _ref;\n  const [props, meta] = useDropdownToggle();\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: children(props, meta)\n  });\n}\n\nDropdownToggle.displayName = 'DropdownToggle';\n/** @component */\n\nexport default DropdownToggle;","map":{"version":3,"names":["useContext","useCallback","React","useSSRSafeId","DropdownContext","Fragment","_Fragment","jsx","_jsx","isRoleMenu","el","_el$getAttribute","getAttribute","toLowerCase","noop","useDropdownToggle","id","show","toggle","setToggle","menuElement","handleClick","e","props","ref","onClick","DropdownToggle","children","meta","displayName"],"sources":["/Users/suhakesikbas/Desktop/hypancee/HypanceFrontend/node_modules/@restart/ui/esm/DropdownToggle.js"],"sourcesContent":["import { useContext, useCallback } from 'react';\nimport * as React from 'react';\nimport { useSSRSafeId } from './ssr';\nimport DropdownContext from './DropdownContext';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const isRoleMenu = el => {\n  var _el$getAttribute;\n\n  return ((_el$getAttribute = el.getAttribute('role')) == null ? void 0 : _el$getAttribute.toLowerCase()) === 'menu';\n};\n\nconst noop = () => {};\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */\n\n\nexport function useDropdownToggle() {\n  const id = useSSRSafeId();\n  const {\n    show = false,\n    toggle = noop,\n    setToggle,\n    menuElement\n  } = useContext(DropdownContext) || {};\n  const handleClick = useCallback(e => {\n    toggle(!show, e);\n  }, [show, toggle]);\n  const props = {\n    id,\n    ref: setToggle || noop,\n    onClick: handleClick,\n    'aria-expanded': !!show\n  }; // This is maybe better down in an effect, but\n  // the component is going to update anyway when the menu element\n  // is set so might return new props.\n\n  if (menuElement && isRoleMenu(menuElement)) {\n    props['aria-haspopup'] = true;\n  }\n\n  return [props, {\n    show,\n    toggle\n  }];\n}\n\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */\nfunction DropdownToggle({\n  children\n}) {\n  const [props, meta] = useDropdownToggle();\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: children(props, meta)\n  });\n}\n\nDropdownToggle.displayName = 'DropdownToggle';\n/** @component */\n\nexport default DropdownToggle;"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,OAA7B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,QAAQ,IAAIC,SAArB,QAAsC,mBAAtC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,OAAO,MAAMC,UAAU,GAAGC,EAAE,IAAI;EAC9B,IAAIC,gBAAJ;;EAEA,OAAO,CAAC,CAACA,gBAAgB,GAAGD,EAAE,CAACE,YAAH,CAAgB,MAAhB,CAApB,KAAgD,IAAhD,GAAuD,KAAK,CAA5D,GAAgED,gBAAgB,CAACE,WAAjB,EAAjE,MAAqG,MAA5G;AACD,CAJM;;AAMP,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASC,iBAAT,GAA6B;EAClC,MAAMC,EAAE,GAAGb,YAAY,EAAvB;EACA,MAAM;IACJc,IAAI,GAAG,KADH;IAEJC,MAAM,GAAGJ,IAFL;IAGJK,SAHI;IAIJC;EAJI,IAKFpB,UAAU,CAACI,eAAD,CAAV,IAA+B,EALnC;EAMA,MAAMiB,WAAW,GAAGpB,WAAW,CAACqB,CAAC,IAAI;IACnCJ,MAAM,CAAC,CAACD,IAAF,EAAQK,CAAR,CAAN;EACD,CAF8B,EAE5B,CAACL,IAAD,EAAOC,MAAP,CAF4B,CAA/B;EAGA,MAAMK,KAAK,GAAG;IACZP,EADY;IAEZQ,GAAG,EAAEL,SAAS,IAAIL,IAFN;IAGZW,OAAO,EAAEJ,WAHG;IAIZ,iBAAiB,CAAC,CAACJ;EAJP,CAAd,CAXkC,CAgB/B;EACH;EACA;;EAEA,IAAIG,WAAW,IAAIX,UAAU,CAACW,WAAD,CAA7B,EAA4C;IAC1CG,KAAK,CAAC,eAAD,CAAL,GAAyB,IAAzB;EACD;;EAED,OAAO,CAACA,KAAD,EAAQ;IACbN,IADa;IAEbC;EAFa,CAAR,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,SAASQ,cAAT,OAEG;EAAA,IAFqB;IACtBC;EADsB,CAErB;EACD,MAAM,CAACJ,KAAD,EAAQK,IAAR,IAAgBb,iBAAiB,EAAvC;EACA,OAAO,aAAaP,IAAI,CAACF,SAAD,EAAY;IAClCqB,QAAQ,EAAEA,QAAQ,CAACJ,KAAD,EAAQK,IAAR;EADgB,CAAZ,CAAxB;AAGD;;AAEDF,cAAc,CAACG,WAAf,GAA6B,gBAA7B;AACA;;AAEA,eAAeH,cAAf"},"metadata":{},"sourceType":"module"}